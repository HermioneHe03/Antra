MVC -> Model View Controller

Model
View
Controller -> a C# class that inhertis from Controller class
		-> Many Action methods

https://localhost:7033/home/index
return View() will return the view with the same name as action method name
return View("SomeViewName") also

Views in MVC are called Razor view with cshtml extension -> combine C# and HTML code

HTTP Requests ->
GET => top 30 movies, get user by id, get movies for genre is 3
POST => Register User, Login
PUT => Edit Profile
DELETE => Delete account

Get User Info
https://localhost:7033/user/details/1
1. UserController -> Controllers
2. Create Details action method -> GET
2. User folder inside Views
3. Create details.cshtml


Organize our code properly
Code should be reusable cod and easily testable


Entities represents your Database tables
Movie table => Movie class columns will be mapped with properties
Genre => Genre class

Models/ViewModels/DTO (Data Transfer Objects) => Views
Home Page => MovieCardModel => PosterUrl, Id, Title
You create model classes based on the requirement of the View

Repositories class/ interfaces they deal with Entity classes
Services classes/ interfaces they deal with Model classes

Every View before rendreing, it will inherit view start and => Layout

MovieCard view in multiple views
Home/index -> MovieCard
User/purchases => MovieCard
User/Facorites => MovieCard

Partial View => MovieCardPartail and then u can reuse it across multiple views

Dependency Injection
Design Pattern that enables you to write loosely coupled code

tightly couple code vs loosely coupled code

easy to maintain
easy to test
easy to change the functionality without changing much of the code

method(int x, IMovieService service);

any class/type that implements that interface

var movieService = new MovieService();
var movieRepo = new MovieRepository(); -->cannot be passed, because in the method, it's IMovieService interface
method(5, movieService);

HomeController c = new HomeController();

### EF Core Code First Approaach using Migrations

1. Create an Entity that you need based on Table requirement
2. Establish the connection string, where you want the database to be crreated
3. Install required libraries from NuGet
4. 